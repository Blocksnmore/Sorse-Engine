{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Sorse Engine Sorse Engine is a simple yet capable 2D game engine with many features Getting started To get started with Sorse Engine visit our Getting Started page","title":"Welcome to Sorse Engine"},{"location":"#welcome-to-sorse-engine","text":"Sorse Engine is a simple yet capable 2D game engine with many features","title":"Welcome to Sorse Engine"},{"location":"#getting-started","text":"To get started with Sorse Engine visit our Getting Started page","title":"Getting started"},{"location":"sdk/","text":"Sorse Engine SDK Sorse Engine uses ES2015 & DOM TypeScript for it's scripts. Sorse Engine also uses a constructor based approach for scripts & sprites","title":"Sorse Engine SDK"},{"location":"sdk/#sorse-engine-sdk","text":"Sorse Engine uses ES2015 & DOM TypeScript for it's scripts. Sorse Engine also uses a constructor based approach for scripts & sprites","title":"Sorse Engine SDK"},{"location":"sdk/engine/methods/defaults/","text":"Color methods Sorse Engine has defaults you can use if fields aren't set setDefaultColor(color) Set the default FillStyle & StrokeStyle color 1 sorse . setDefaultColor ( 'black' ); setFillColor(color) Set the default FillStyle color 1 sorse . setFillColor ( 'black' ); setStrokeColor(color) Set the default StrokeStyle color 1 sorse . setStrokeColor ( 'black' ); setFont(font, size) Set the default font 1 sorse . setFont ( 'Arial' , 24 ); setLineDash(dashes[]) Set the default line dashes 1 sorse . setLineDash ([ 1 , 2 , 3 ]); setGameFps(fps) Set the game FPS 1 sorse . setGameFPS ( 60 );","title":"Defaults"},{"location":"sdk/engine/methods/defaults/#color-methods","text":"Sorse Engine has defaults you can use if fields aren't set","title":"Color methods"},{"location":"sdk/engine/methods/defaults/#setdefaultcolorcolor","text":"Set the default FillStyle & StrokeStyle color 1 sorse . setDefaultColor ( 'black' );","title":"setDefaultColor(color)"},{"location":"sdk/engine/methods/defaults/#setfillcolorcolor","text":"Set the default FillStyle color 1 sorse . setFillColor ( 'black' );","title":"setFillColor(color)"},{"location":"sdk/engine/methods/defaults/#setstrokecolorcolor","text":"Set the default StrokeStyle color 1 sorse . setStrokeColor ( 'black' );","title":"setStrokeColor(color)"},{"location":"sdk/engine/methods/defaults/#setfontfont-size","text":"Set the default font 1 sorse . setFont ( 'Arial' , 24 );","title":"setFont(font, size)"},{"location":"sdk/engine/methods/defaults/#setlinedashdashes","text":"Set the default line dashes 1 sorse . setLineDash ([ 1 , 2 , 3 ]);","title":"setLineDash(dashes[])"},{"location":"sdk/engine/methods/defaults/#setgamefpsfps","text":"Set the game FPS 1 sorse . setGameFPS ( 60 );","title":"setGameFps(fps)"},{"location":"sdk/engine/methods/draw/","text":"Draw methods Sorse Engine has multiple easy to use methods to draw to the screen drawRect(options) Draw a Rectangle 1 2 3 4 5 6 sorse . drawRect ({ x : 0 , y : 0 , width : 100 , height : 100 , }); drawCircle(options) Draw a Circle 1 2 3 4 5 sorse . drawCircle ({ x : 100 , y : 100 , radius : 50 , }); drawImage(options) Draw an Image 1 2 3 4 5 6 7 sorse . drawImage ({ image : './sorse.png' , x : 0 , y : 0 , width : 100 , height : 100 , }); drawText(options) Draw some Text 1 2 3 4 5 6 sorse . drawText ({ text : 'Hello from Sorse Engine!' , x : 100 , y : 100 , size : 24 , }); drawLine(options) Draw a Line 1 2 3 4 5 6 7 sorse . drawLine ({ x1 : 0 , y1 : 0 , x2 : 100 , y2 : 100 , size : 10 , }); drawOval(options) Draw an Oval 1 2 3 4 5 6 7 sorse . drawOval ({ x : 100 , y : 100 , radiusX : 10 , radiusY : 5 , rotation : 0 , }); clearRect(options) Clear the selected region 1 2 3 4 5 6 sorse . clearRect ({ x : 0 , y : 0 , width : 10 , height : 10 , }); clearScreen(options) Clear the entire screen 1 sorse . clearScreen ();","title":"Draw"},{"location":"sdk/engine/methods/draw/#draw-methods","text":"Sorse Engine has multiple easy to use methods to draw to the screen","title":"Draw methods"},{"location":"sdk/engine/methods/draw/#drawrectoptions","text":"Draw a Rectangle 1 2 3 4 5 6 sorse . drawRect ({ x : 0 , y : 0 , width : 100 , height : 100 , });","title":"drawRect(options)"},{"location":"sdk/engine/methods/draw/#drawcircleoptions","text":"Draw a Circle 1 2 3 4 5 sorse . drawCircle ({ x : 100 , y : 100 , radius : 50 , });","title":"drawCircle(options)"},{"location":"sdk/engine/methods/draw/#drawimageoptions","text":"Draw an Image 1 2 3 4 5 6 7 sorse . drawImage ({ image : './sorse.png' , x : 0 , y : 0 , width : 100 , height : 100 , });","title":"drawImage(options)"},{"location":"sdk/engine/methods/draw/#drawtextoptions","text":"Draw some Text 1 2 3 4 5 6 sorse . drawText ({ text : 'Hello from Sorse Engine!' , x : 100 , y : 100 , size : 24 , });","title":"drawText(options)"},{"location":"sdk/engine/methods/draw/#drawlineoptions","text":"Draw a Line 1 2 3 4 5 6 7 sorse . drawLine ({ x1 : 0 , y1 : 0 , x2 : 100 , y2 : 100 , size : 10 , });","title":"drawLine(options)"},{"location":"sdk/engine/methods/draw/#drawovaloptions","text":"Draw an Oval 1 2 3 4 5 6 7 sorse . drawOval ({ x : 100 , y : 100 , radiusX : 10 , radiusY : 5 , rotation : 0 , });","title":"drawOval(options)"},{"location":"sdk/engine/methods/draw/#clearrectoptions","text":"Clear the selected region 1 2 3 4 5 6 sorse . clearRect ({ x : 0 , y : 0 , width : 10 , height : 10 , });","title":"clearRect(options)"},{"location":"sdk/engine/methods/draw/#clearscreenoptions","text":"Clear the entire screen 1 sorse . clearScreen ();","title":"clearScreen(options)"},{"location":"sdk/engine/methods/var/","text":"Var methods Sorse Engine offers a simple way to do global variables with Sorse Var createVar(name, data) Create a variable 1 sorse . createVar ( 'example' , { engine : 'Sorse' }); deleteVar(name) Delete a variable 1 sorse . deleteVar ( 'example' ); hasVar(name) Check if a var exsists 1 const hasVar = sorse . hasVar ( \"example\" ) ? \"Has\" : \"Doesn't have\" getVar(name) Get a variable 1 console . log ( sorse . getVar ( 'example' ));","title":"Var"},{"location":"sdk/engine/methods/var/#var-methods","text":"Sorse Engine offers a simple way to do global variables with Sorse Var","title":"Var methods"},{"location":"sdk/engine/methods/var/#createvarname-data","text":"Create a variable 1 sorse . createVar ( 'example' , { engine : 'Sorse' });","title":"createVar(name, data)"},{"location":"sdk/engine/methods/var/#deletevarname","text":"Delete a variable 1 sorse . deleteVar ( 'example' );","title":"deleteVar(name)"},{"location":"sdk/engine/methods/var/#hasvarname","text":"Check if a var exsists 1 const hasVar = sorse . hasVar ( \"example\" ) ? \"Has\" : \"Doesn't have\"","title":"hasVar(name)"},{"location":"sdk/engine/methods/var/#getvarname","text":"Get a variable 1 console . log ( sorse . getVar ( 'example' ));","title":"getVar(name)"},{"location":"sdk/script/","text":"Sorse Scripts To create a new game script create a file with the following: 1 2 3 new SorseScript ({ Script options }); Script options Options that have a ? are optional 1 2 3 4 5 6 7 8 9 10 name: Script Name author?: Script Developer description?: Script Description version?: Script Version disabled?: Disable Script priority?: Script Priority (Higher means more priority) sprites?: Array of SorseScripts onReady?: Function that runs when the script is ready onRender: Function that runs every frame onInput?: Function that runs on key presses & mouse interactions","title":"Sorse Scripts"},{"location":"sdk/script/#sorse-scripts","text":"To create a new game script create a file with the following: 1 2 3 new SorseScript ({ Script options });","title":"Sorse Scripts"},{"location":"sdk/script/#script-options","text":"Options that have a ? are optional 1 2 3 4 5 6 7 8 9 10 name: Script Name author?: Script Developer description?: Script Description version?: Script Version disabled?: Disable Script priority?: Script Priority (Higher means more priority) sprites?: Array of SorseScripts onReady?: Function that runs when the script is ready onRender: Function that runs every frame onInput?: Function that runs on key presses & mouse interactions","title":"Script options"},{"location":"sdk/sprite/","text":"Sorse Sprites To create a new game sprite create a file with the following: 1 2 3 new SorseScript ({ Script options }); Sprite options Options that have a ? are optional 1 2 3 4 5 6 7 position: Sprite X & Y position disabled?: Disable Sprite priority?: Sprite Priority (Higher means more priority) id?: Sprite id (For Sorse#getSpriteByID) onReady?: Function that runs when the sprite is ready onRender: Function that runs every frame onInput?: Function that runs on key presses & mouse interactions","title":"Sorse Sprites"},{"location":"sdk/sprite/#sorse-sprites","text":"To create a new game sprite create a file with the following: 1 2 3 new SorseScript ({ Script options });","title":"Sorse Sprites"},{"location":"sdk/sprite/#sprite-options","text":"Options that have a ? are optional 1 2 3 4 5 6 7 position: Sprite X & Y position disabled?: Disable Sprite priority?: Sprite Priority (Higher means more priority) id?: Sprite id (For Sorse#getSpriteByID) onReady?: Function that runs when the sprite is ready onRender: Function that runs every frame onInput?: Function that runs on key presses & mouse interactions","title":"Sprite options"},{"location":"setup/","text":"Getting started Requirements To use sorse engine you require the following: 1 2 3 - A webserver - The ability to run TSC - A way to edit TS/JS code Setting up Sorse Engine Download the latest release of Sorse Engine from the Releases Page and place the sorse folder in your root directory. Once that is completed place the folowing code inside of your html file for said game: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < body > < script src = \"/sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'Game name', gameScripts: ['Game scripts'], author: 'Game author', version: 'Game version', description: 'Game description', }); })()\" > </ script > </ body > Once you configure your game sorse will be fully set up! Configuration options All these fields are required 1 2 3 4 5 name: Game Name gameScripts: An array of paths to Game Scripts author: Game Author version: Game Version description: Game Description Configuration example 1 2 3 4 5 name: MyFirstGame gameScripts: ['/gamescript/1.js', '/gamescript/2.js'] author: Blocks_n_more version: 1.0.0 description: My first Sorse Engine game","title":"Getting started"},{"location":"setup/#getting-started","text":"","title":"Getting started"},{"location":"setup/#requirements","text":"To use sorse engine you require the following: 1 2 3 - A webserver - The ability to run TSC - A way to edit TS/JS code","title":"Requirements"},{"location":"setup/#setting-up-sorse-engine","text":"Download the latest release of Sorse Engine from the Releases Page and place the sorse folder in your root directory. Once that is completed place the folowing code inside of your html file for said game: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < body > < script src = \"/sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'Game name', gameScripts: ['Game scripts'], author: 'Game author', version: 'Game version', description: 'Game description', }); })()\" > </ script > </ body > Once you configure your game sorse will be fully set up!","title":"Setting up Sorse Engine"},{"location":"setup/#configuration-options","text":"All these fields are required 1 2 3 4 5 name: Game Name gameScripts: An array of paths to Game Scripts author: Game Author version: Game Version description: Game Description","title":"Configuration options"},{"location":"setup/#configuration-example","text":"1 2 3 4 5 name: MyFirstGame gameScripts: ['/gamescript/1.js', '/gamescript/2.js'] author: Blocks_n_more version: 1.0.0 description: My first Sorse Engine game","title":"Configuration example"},{"location":"tutorial/first%20sorse%20game/","text":"Making your first Sorse Engine game Creating games in Sorse Engine is easy! This tutorial will show how to create your very first game What game should you make? You could make any game you choose but for this tutorial we're going to make a simple clicker game Getting started In order to start making games in Sorse Engine complete our Getting Started guide. Setting up our enviroment For this example we will be using VSCode & the Intelli-Sense plugin. Set up a new project in VSCode and add the Sorse folder from the Releases Page into your project. Create an index.html file which will be our main file and insert the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < body > < script src = \"sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'My first game', gameScripts: [], author: 'Sorse Engine Documentation', version: '1.0.0', description: 'Tutorial game for the Sorse Engine Docs', }); })()\" ></ script > </ body > Finally create a file called tsconfig.json with the following content: 1 2 3 4 5 { \"compilerOptions\" : { \"lib\" : [ \"ES2015\" , \"DOM\" ] } } Now we're ready to start coding! Creating our script Create a new folder called scripts in the root directory, then create a file called main.ts . This should be your current structure: Now write the following in main.ts : 1 2 3 4 5 6 7 8 9 10 11 12 new SorseScript ({ name : 'Main script' , onReady ( sorse ) { // Ready Code }, onRender ( sorse ) { // Render Code }, onInput ( sorse , event ) { // Input Code }, }); Now we have our completed script file! Writing the game logic Now that our script is compled we can start writing our code! Ready Function First we're going to start writing our onReady function. You should use the onReady function to initialize all of your variables, so let's do that! Our game is going to use 4 variables: clicks , upgrades , upgradeCost , and upgradeMultiplier . You also want to configure your game FPS here. Use the following code to initialize the variables: 1 2 3 4 5 sorse . setGameFPS ( 30 ); sorse . createVar ( 'clicks' , 0 ); sorse . createVar ( 'upgrades' , 0 ); sorse . createVar ( 'upgradeMultiplier' , 5 ); sorse . createVar ( 'upgradeCost' , 1 * sorse . getVar ( 'upgradeMultiplier' )); If you want to increase the cost of each upgrade then change the upgradeMultiplier variable. Render Function Now let's start writing the onRender function. Use the following code for our function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 sorse . clearScreen (); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 , size : 24 , text : `Clicks: ${ sorse . getVar ( 'clicks' ) } ` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 , size : 24 , text : `Next upgrade: ${ sorse . getVar ( 'upgradeCost' ) } Clicks` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 2 , size : 24 , text : `Press Enter to buy` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 3 , size : 24 , text : `Click multiplier: ${ sorse . getVar ( 'upgrades' ) } ` , color : 'white' , }); You can change the text color by modifying the color value. Input Function Finally let's work on the onInput function. This event is fired whenever a key is pressed or the mouse is clicked. You can use instanceOf to check if the event is from the Mouse of Keyboard. Use the following code for your function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 if ( event instanceof MouseEvent ) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) + 1 + sorse . getVar ( 'upgrades' ) ); } else { if ( event . key === 'Enter' ) { if ( sorse . getVar ( 'clicks' ) >= sorse . getVar ( 'upgradeCost' )) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) - sorse . getVar ( 'upgradeCost' ) ); sorse . createVar ( 'upgrades' , sorse . getVar ( 'upgrades' ) + 1 ); sorse . createVar ( 'upgradeCost' , sorse . getVar ( 'upgradeCost' ) * sorse . getVar ( 'upgradeMultiplier' ) ); } } } Now we're done with our code! Let's finish up our game. Finishing up our game Compile your code in the terminal by running tsc --build . Also add your script to the index.html file like so: Replace all .ts extensions with .js 1 gameScripts: ['/scripts/main.js'] Now view index.html on your webserver and try your game out! Final notes You have now created your first ever game in Sorse Engine! You can now create your own games using Sorse Engine. Having any issues? Try checking out the Sorse Engine SDK Final Source Code Here is the final source code for the files Index.html: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < body > < script src = \"sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'My first game', gameScripts: ['/scripts/main.js'], author: 'Sorse Engine Documentation', version: '1.0.0', description: 'Tutorial game for the Sorse Engine Docs', }); })()\" ></ script > </ body > Main.ts: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 new SorseScript ({ name : 'Main script' , onReady ( sorse ) { // Ready Code sorse . createVar ( 'clicks' , 0 ); sorse . createVar ( 'upgrades' , 0 ); sorse . createVar ( 'upgradeMultiplier' , 5 ); sorse . createVar ( 'upgradeCost' , 1 * sorse . getVar ( 'upgradeMultiplier' )); }, onRender ( sorse ) { // Render Code sorse . clearScreen (); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 , size : 24 , text : `Clicks: ${ sorse . getVar ( 'clicks' ) } ` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 , size : 24 , text : `Next upgrade: ${ sorse . getVar ( 'upgradeCost' ) } Clicks` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 2 , size : 24 , text : `Press Enter to buy` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 3 , size : 24 , text : `Click multiplier: ${ sorse . getVar ( 'upgrades' ) } ` , color : 'white' , }); }, onInput ( sorse , event ) { // Input Code if ( event instanceof MouseEvent ) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) + 1 + sorse . getVar ( 'upgrades' ) ); } else { if ( event . key === 'Enter' ) { if ( sorse . getVar ( 'clicks' ) >= sorse . getVar ( 'upgradeCost' )) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) - sorse . getVar ( 'upgradeCost' ) ); sorse . createVar ( 'upgrades' , sorse . getVar ( 'upgrades' ) + 1 ); sorse . createVar ( 'upgradeCost' , sorse . getVar ( 'upgradeCost' ) * sorse . getVar ( 'upgradeMultiplier' ) ); } } } }, });","title":"Making your first Sorse Engine game"},{"location":"tutorial/first%20sorse%20game/#making-your-first-sorse-engine-game","text":"Creating games in Sorse Engine is easy! This tutorial will show how to create your very first game","title":"Making your first Sorse Engine game"},{"location":"tutorial/first%20sorse%20game/#what-game-should-you-make","text":"You could make any game you choose but for this tutorial we're going to make a simple clicker game","title":"What game should you make?"},{"location":"tutorial/first%20sorse%20game/#getting-started","text":"In order to start making games in Sorse Engine complete our Getting Started guide.","title":"Getting started"},{"location":"tutorial/first%20sorse%20game/#setting-up-our-enviroment","text":"For this example we will be using VSCode & the Intelli-Sense plugin. Set up a new project in VSCode and add the Sorse folder from the Releases Page into your project. Create an index.html file which will be our main file and insert the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < body > < script src = \"sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'My first game', gameScripts: [], author: 'Sorse Engine Documentation', version: '1.0.0', description: 'Tutorial game for the Sorse Engine Docs', }); })()\" ></ script > </ body > Finally create a file called tsconfig.json with the following content: 1 2 3 4 5 { \"compilerOptions\" : { \"lib\" : [ \"ES2015\" , \"DOM\" ] } } Now we're ready to start coding!","title":"Setting up our enviroment"},{"location":"tutorial/first%20sorse%20game/#creating-our-script","text":"Create a new folder called scripts in the root directory, then create a file called main.ts . This should be your current structure: Now write the following in main.ts : 1 2 3 4 5 6 7 8 9 10 11 12 new SorseScript ({ name : 'Main script' , onReady ( sorse ) { // Ready Code }, onRender ( sorse ) { // Render Code }, onInput ( sorse , event ) { // Input Code }, }); Now we have our completed script file!","title":"Creating our script"},{"location":"tutorial/first%20sorse%20game/#writing-the-game-logic","text":"Now that our script is compled we can start writing our code!","title":"Writing the game logic"},{"location":"tutorial/first%20sorse%20game/#ready-function","text":"First we're going to start writing our onReady function. You should use the onReady function to initialize all of your variables, so let's do that! Our game is going to use 4 variables: clicks , upgrades , upgradeCost , and upgradeMultiplier . You also want to configure your game FPS here. Use the following code to initialize the variables: 1 2 3 4 5 sorse . setGameFPS ( 30 ); sorse . createVar ( 'clicks' , 0 ); sorse . createVar ( 'upgrades' , 0 ); sorse . createVar ( 'upgradeMultiplier' , 5 ); sorse . createVar ( 'upgradeCost' , 1 * sorse . getVar ( 'upgradeMultiplier' )); If you want to increase the cost of each upgrade then change the upgradeMultiplier variable.","title":"Ready Function"},{"location":"tutorial/first%20sorse%20game/#render-function","text":"Now let's start writing the onRender function. Use the following code for our function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 sorse . clearScreen (); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 , size : 24 , text : `Clicks: ${ sorse . getVar ( 'clicks' ) } ` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 , size : 24 , text : `Next upgrade: ${ sorse . getVar ( 'upgradeCost' ) } Clicks` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 2 , size : 24 , text : `Press Enter to buy` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 3 , size : 24 , text : `Click multiplier: ${ sorse . getVar ( 'upgrades' ) } ` , color : 'white' , }); You can change the text color by modifying the color value.","title":"Render Function"},{"location":"tutorial/first%20sorse%20game/#input-function","text":"Finally let's work on the onInput function. This event is fired whenever a key is pressed or the mouse is clicked. You can use instanceOf to check if the event is from the Mouse of Keyboard. Use the following code for your function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 if ( event instanceof MouseEvent ) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) + 1 + sorse . getVar ( 'upgrades' ) ); } else { if ( event . key === 'Enter' ) { if ( sorse . getVar ( 'clicks' ) >= sorse . getVar ( 'upgradeCost' )) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) - sorse . getVar ( 'upgradeCost' ) ); sorse . createVar ( 'upgrades' , sorse . getVar ( 'upgrades' ) + 1 ); sorse . createVar ( 'upgradeCost' , sorse . getVar ( 'upgradeCost' ) * sorse . getVar ( 'upgradeMultiplier' ) ); } } } Now we're done with our code! Let's finish up our game.","title":"Input Function"},{"location":"tutorial/first%20sorse%20game/#finishing-up-our-game","text":"Compile your code in the terminal by running tsc --build . Also add your script to the index.html file like so: Replace all .ts extensions with .js 1 gameScripts: ['/scripts/main.js'] Now view index.html on your webserver and try your game out!","title":"Finishing up our game"},{"location":"tutorial/first%20sorse%20game/#final-notes","text":"You have now created your first ever game in Sorse Engine! You can now create your own games using Sorse Engine. Having any issues? Try checking out the Sorse Engine SDK","title":"Final notes"},{"location":"tutorial/first%20sorse%20game/#final-source-code","text":"Here is the final source code for the files Index.html: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < body > < script src = \"sorse/loader/loader.js\" onload = \"(()=>{ new SorseGame({ name: 'My first game', gameScripts: ['/scripts/main.js'], author: 'Sorse Engine Documentation', version: '1.0.0', description: 'Tutorial game for the Sorse Engine Docs', }); })()\" ></ script > </ body > Main.ts: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 new SorseScript ({ name : 'Main script' , onReady ( sorse ) { // Ready Code sorse . createVar ( 'clicks' , 0 ); sorse . createVar ( 'upgrades' , 0 ); sorse . createVar ( 'upgradeMultiplier' , 5 ); sorse . createVar ( 'upgradeCost' , 1 * sorse . getVar ( 'upgradeMultiplier' )); }, onRender ( sorse ) { // Render Code sorse . clearScreen (); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 , size : 24 , text : `Clicks: ${ sorse . getVar ( 'clicks' ) } ` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 , size : 24 , text : `Next upgrade: ${ sorse . getVar ( 'upgradeCost' ) } Clicks` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 2 , size : 24 , text : `Press Enter to buy` , color : 'white' , }); sorse . drawText ({ x : sorse.width / 2 , y : sorse.height / 2 + 24 * 3 , size : 24 , text : `Click multiplier: ${ sorse . getVar ( 'upgrades' ) } ` , color : 'white' , }); }, onInput ( sorse , event ) { // Input Code if ( event instanceof MouseEvent ) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) + 1 + sorse . getVar ( 'upgrades' ) ); } else { if ( event . key === 'Enter' ) { if ( sorse . getVar ( 'clicks' ) >= sorse . getVar ( 'upgradeCost' )) { sorse . createVar ( 'clicks' , sorse . getVar ( 'clicks' ) - sorse . getVar ( 'upgradeCost' ) ); sorse . createVar ( 'upgrades' , sorse . getVar ( 'upgrades' ) + 1 ); sorse . createVar ( 'upgradeCost' , sorse . getVar ( 'upgradeCost' ) * sorse . getVar ( 'upgradeMultiplier' ) ); } } } }, });","title":"Final Source Code"}]}